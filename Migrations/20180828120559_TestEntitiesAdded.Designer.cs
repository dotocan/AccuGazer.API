// <auto-generated />
using System;
using AccuGazer.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AccuGazer.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180828120559_TestEntitiesAdded")]
    partial class TestEntitiesAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("AccuGazer.API.Models.GazePoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.ToTable("GazePoints");
                });

            modelBuilder.Entity("AccuGazer.API.Models.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GazePointId");

                    b.Property<bool>("IsHit");

                    b.Property<long>("MeasuredAt");

                    b.Property<long>("RectangleId");

                    b.Property<long?>("TestId");

                    b.HasKey("Id");

                    b.HasIndex("GazePointId");

                    b.HasIndex("RectangleId");

                    b.HasIndex("TestId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("AccuGazer.API.Models.Rectangle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Height");

                    b.Property<int>("Width");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.ToTable("Rectangles");
                });

            modelBuilder.Entity("AccuGazer.API.Models.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NumberOfTests");

                    b.Property<bool>("Shuffle");

                    b.Property<long>("TestDurationInSeconds");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("AccuGazer.API.Models.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EndTime");

                    b.Property<int>("ScreenHeight");

                    b.Property<int>("ScreenWidth");

                    b.Property<long>("StartTime");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("AccuGazer.API.Models.Measurement", b =>
                {
                    b.HasOne("AccuGazer.API.Models.GazePoint", "GazePoint")
                        .WithMany()
                        .HasForeignKey("GazePointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccuGazer.API.Models.Rectangle", "Rectangle")
                        .WithMany()
                        .HasForeignKey("RectangleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AccuGazer.API.Models.Test")
                        .WithMany("Measurements")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("AccuGazer.API.Models.Test", b =>
                {
                    b.HasOne("AccuGazer.API.Models.User", "User")
                        .WithMany("tests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
